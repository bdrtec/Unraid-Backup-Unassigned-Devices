#!/bin/bash
#PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
arrayStarted=true

# INCREMENTAL OR SYNC BACKUP TO UNRAID UNASSIGNED DEVICES -----------
# LINK: https://github.com/bdrtec/Unraid-Backup-Unassigned-Devices
# AUTHOR: BRAULIO DIAS RIBEIRO
# -------------------------------------------------------------------


# DESCRIPTION -------------------------------------------------------
# This script make incremental or sync backup to PLUG & PLAY devices or FIXED devices.
# It's possible to schedule how often and what type of the backup will be done.
# When the backup start, you'll be notified by the email. When it finishes, too.
#
# END DESCRIPTION----------------------------------------------------


# TYPE OF BACKUP ----------------------------------------------------
# INCREMENTAL BACKUP
# Don't delete anything from the backup directory (Script_Dir), just copy new or modified files.
# 		Plug & Play: 	Just plug the device into USB.
# 		Fixed:			They are already connected but not mounted.
# 			 	  		Schedule the execution frequency in "CA User Scripts -> Schedule Disabled".
#			   			Example: "Schedule Daily" or "Schedule Weekly".
#
# SYNC BACKUP
# Mirroring. If the file isn't in the source directory (Src_Flash), it'll be deleted from the backup directory (Script_Dir).
# 		Plug & Play:	How often to backup is defined in the script (Day_Sync).
#						Example: sync backup every 30 days from the last backup.
# 		Fixed:			How often to backup is defined in the script (Day_Sync).
#						Example: sync backup every 30 days from the last backup.
#
# END TYPE OF BACKUP ------------------------------------------------


# INSTALL -----------------------------------------------------------
# You need install "Unassigned Devices" and "Unassigned Devices Plus (UD+)" plugins
#		https://forums.unraid.net/topic/92462-unassigned-devices-managing-disk-drives-and-remote-shares-outside-of-the-unraid-array/
#
# You need install "CA User Scripts" plugin
#		https://forums.unraid.net/topic/48286-plugin-ca-user-scripts/
#
# END INSTALL -------------------------------------------------------


# SUMMARY -----------------------------------------------------------
# Configure the variables in "CONFIGURATION VARIABLES".
# Run the script on each device for the first time.
# A script will be created in "CA User Scripts / Script_Name".
# The folder and all device files will be created in "CA User Scripts / Script_Name / Device Serial" and a copy in "Script_Dir / Script_Name / Device Serial".
# Add the path of the folders you want to backup in "Script_Dir / Device Serial / PATHS.txt".
# Run the script on each device again to sync all files and start the backup.
#
# END SUMMARY -------------------------------------------------------


# HOW DOES IT WORK? -------------------------------------------------
# Let's use "CA User Scripts" to control all backup devices.
# The script uses the partition name (LABEL) to make backup. Don't use the same names even if they are different devices.
# Four files are created in each device's folder.
#		- (LOG-LAST-SYNC-BKP.txt)saves the date of the last synchronized backup.
#		- (LOG-BKP.txt) contains the information that will be sent to the email (Send_Email).
#		- (PATHS.txt) to enter all the paths you want to backup.
#		- (SCRIPT.txt) a copy of the script.
#
# END HOW DOES IT WORK? ---------------------------------------------


# STARTING THE CONFIGURATION ----------------------------------------
# Configure the variables in the script.
# Attention: the example files are attached.
#
# END STARTING THE CONFIGURATION ------------------------------------


# CREATE SCRIPT "CA USER SCRIPTS" AND FILES FOR EACH BACKUP DEVICE ---------
# Run the script on the device the first time to create the files.
# A script (Script_Name) is created in "CA User Scripts". Your function is:
# 		- Store files from all devices in one location.
#		- Sync device files between "CA User Scripts" and our backup folder (a copy of these files is forwarded to (Script_Dir)).
#		- Mount fixed devices (those that are connected but unmounted). Example: internally connected devices for backup.
#				After creating this script, set the variables in "CA User Scripts -> Script_Name") to mount the fixed devices.
#
# Each device will have a folder inside the script folder (Script_Name) created in "CA User Scripts".
# This folder is created automatically when running the script on the device for the first time.
# The folder name of each device is the SERIAL that appears on unassigned devices.
#		- Example: (ST1000LM024_HN-M101MBB_S2RUJ9BD409470) (ST2000DM001-1CH164_Z1E450FD).
#		- The changes to the "PATH.txt" file must be made in the backup folder (Script_Dir), because the script syncs with the "CA User Scripts" folder when it runs.
#		- The other three files are only backup. If modified, they will not be copied to "CA Script Users".
#
# END CREATE SCRIPT "CA USER SCRIPTS" AND FILES FOR EACH BACKUP DEVICE -----


# UNDERSTANDING "PATHS.txt" FILE ------------------------------------
# Open each "PATHS.txt" file in (Script_Dir) and type all the paths you want to backup.
# Type a path per line and add "/***" at the end of each line. The "***" is to copy all subfolders of this directory.
# 		If you're copying just the sub directory, you'll need to enter the parent directory first without "***".
# 		The default folder (source) to copy the files is "/mnt/user/". This is where you create UNRAID shares. So you just need to type the rest of the way.
#
#		Example "Default Source"
#			/mnt/user/Photo
#			/mnt/user/Music
#			/mnt/user/Video
#			/mnt/user/Video/Action
#			/mnt/user/Video/Comedy
#
#		Example "PATHS.txt" copying the full directory
#			Photo/***
#			Music/***
#			Video/***
#
#		Example "PATHS.txt" copying just the sub directory
#			Photo/***
#			Music/***
#			Video/
#			Video/Action/***
#
# 		Attention
# 			Don't type the path between quotes.   Right: Video/Comedy/***  Wrong: "Video/Comedy/***"
# 			Don't type the path between slashes.  Right: Video/Comedy/***  Wrong: /Video/Comedy/***  Wrong: Video/Comedy/***/  Wrong: /Video/Comedy/***/
#
#
# Run the script on the device again to sync all files and start the backup.
#
# END UNDERSTANDING "PATHS.txt" FILE --------------------------------

# FINISHING THE CONFIGURATION ---------------------------------------
# Run the script on the device again to sync all files and start the backup.
# Attention: the example files are attached.
#
# END FINISHING THE CONFIGURATION -----------------------------------



#####################################################################
#		        CONFIGURATION VARIABLES			    #
#####################################################################

# CHANGE THIS VARIABLES ---------------------------------------------
St_On_Off=0
 		# TURN THE SCRIPT ON OR OFF. 0 disable backup, 1 enable backup. If set "0" nothing will be modified (copied or deleted)!

Script_Name="bkp_ud"
 		# Script name. It'll be created in "CA user scripts" and in the folder "Script_Dir". Type between "" without / begin and end

Script_Dir="/mnt/user/Braulio-Technology/Unassigned_Devices_Backup"
		# Path to backup all files on this device. Type between "" without / begin and end

Day_Sync=90
		# PLUG & PLAY DEVICE
		# Incremental backup: the frequency is when you plug the device into USB
 		# Sync backup: 0 disable, x enable. "Day_Sync" is how often the script will sync (mirroring) backup
		#
 		# FIXED DEVICE
		# Incremental backup: the frequency is scheduled in "CA User Scripts -> Schedule Disabled"
 		# Sync backup: 0 disable, x enable. "Day_Sync" is how often the script will sync (mirroring) backup

Send_Email1="test@gmail.com"
#Send_Email2="test@gmail.com"
		# Send email to. Type between ""
# END CHANGE THIS VARIABLES -----------------------------------------

# TRANSLATE THIS VARIABLES TO YOUR LANGUAGE -------------------------
# Translate to your preferred language (English, Portuguese, German, Russian, Italian, Spanish, etc)

# ***** LANGUAGE: PORTUGUESE ****
Msg_Mail_Subject="Backup: ${LABEL}"
Msg_Device="Dispositivo"
Msg_Date="Data"

Msg_Bkp_Type_Incr="Tipo = Incremental"
Msg_Bkp_Type_Sync="Tipo = Sincronizado"

Msg_Bkp_Start="Status: Backup inicializado. Você receberá um e-mail quando terminar"

Msg_Bkp_Finish_On="Status: Backup efetuado com sucesso"
Msg_Bkp_Finish_Off="Status: Backup executado em modo teste. Nenhum arquivo foi modificado (copiado ou deletado)"

Msg_Mount="Status: Erro ao iniciar backup. O dispositivo não foi montado"
Msg_Unmount="Status: Erro ao finalizar backup. O dispositivo não foi desmontado"

Msg_Error="Status: Backup não configurado para este dispositivo"

Msg_Alert1="NÃO DESCONECTE o dispositivo da USB (se estiver conectado)"
Msg_Alert2="Desconecte o dispositivo da USB (se estiver conectado)"
Msg_Alert3="Entre em contato com a equipe de TI"
# ***** END LANGUAGE: PORTUGUESE *****

# ***** LANGUAGE: ENGLISH *****
#Msg_Mail_Subject="Backup: ${LABEL}"
#Msg_Device="Device"
#Msg_Date="Date"

#Msg_Bkp_Type_Incr="Type = Incremental"
#Msg_Bkp_Type_Sync="Type = Synchronized"

#Msg_Bkp_Start="Status: Backup initialized. You'll receive an email when finish"

#Msg_Bkp_Finish_On="Status: Backup performed successfully"
#Msg_Bkp_Finish_Off="Status: Backup performed in test mode. No files were modified (copied or deleted)"

#Msg_Mount="Status: Error starting backup. The device hasn't been mounted"
#Msg_Unmount="Status: Error finishing backup. The device hasn't been unmounted"

#Msg_Error="Status: Backup not configured for this device"

#Msg_Alert1="DON'T DISCONNECT the device from the USB (if connected)"
#Msg_Alert2="Disconnect the device from the USB (if connected)"
#Msg_Alert3="Contact the IT team"
# ***** END LANGUAGE: ENGLISH *****
# END TRANSLATE THIS VARIABLES TO YOUR LANGUAGE ---------------------

#####################################################################
#		     END CONFIGURATION VARIABLES	            #
#####################################################################



#####################################################################
#		      HERE THE PROGRAMMING BEGINS		    #
#		         DON'T CHANGE ANYTHING		            #
#####################################################################

# INCREMENTAL AND SYNC BACKUP ---------------------------------------
Func-Incr-Sync() {
	echo "${Msg_Bkp_Start}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "${Msg_Alert1}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	Func-Send-Email
	Func-Log
	
	# Read the file with the date of the last backup in the YYYY-MM-DD format
	Log_Last_Sync_Bkp=$(sed '$q' "${Src_Flash}/${Script_Name}/${SERIAL}/LOG-LAST-SYNC-BKP.txt")
	
	# Test if the file exists or is empty
	if [ ! -f "${Src_Flash}/${Script_Name}/${SERIAL}/LOG-LAST-SYNC-BKP.txt" ] || [ -z "${Log_Last_Sync_Bkp}" ]; then
		
		# Test if the script is enabled or in test mode
		if [ -n "${St_On_Off}" ] && [ "${St_On_Off}" -eq "1" ]; then
			# Save the date of the last backup (today) in the YYYY-MM-DD format
			echo "${Today_Date}" > ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-LAST-SYNC-BKP.txt
		fi
		
	fi
	
	if [ -n "${Day_Sync}" ] && [ "${Day_Sync}" -ne 0 ]; then
		# Difference in days. The calculation is in seconds (Today_Date - Log_Last_Sync_Bkp)
		let Dif_Date=($(date +%s -d ${Today_Date})-$(date +%s -d ${Log_Last_Sync_Bkp}))/86400
		
		# Test if the current date is the backup scheduled date
		if [ "${Dif_Date}" -ge "${Day_Sync}" ]; then
			St_Sync_Bkp=1
		fi
	fi
}
# END INCREMENTAL AND SYNC BACKUP -----------------------------------

# FUNCTION RSYNC ----------------------------------------------------
Func-Rsync() {
	Rsync_Config=("-avih" "--stats")
	
	if [ -n "${St_Sync_Bkp}" ] && [ "${St_Sync_Bkp}" -eq "1" ]; then
		
		Rsync_Config+=("--delete")
		
		# Test if the script is turned on or off
		if [ -n "${St_On_Off}" ] && [ "${St_On_Off}" -eq "1" ]; then
			echo "${Today_Date}" > ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-LAST-SYNC-BKP.txt
		fi
		
		echo "${Msg_Bkp_Type_Sync}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
		
	else
		echo "${Msg_Bkp_Type_Incr}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	fi
	
	if [ -n "${St_On_Off}" ] && [ "${St_On_Off}" -eq "0" ]; then
		Rsync_Config+=("--dry-run")
		echo "${Msg_Bkp_Finish_Off}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
		echo "" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
		echo "${Msg_Alert2}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	elif [ -n "${St_On_Off}" ] && [ "${St_On_Off}" -eq "1" ]; then
		echo "${Msg_Bkp_Finish_On}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
		echo "" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
		echo "${Msg_Alert2}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	fi
	
	Rsync_Config+=("--include-from=${Src_Flash}/${Script_Name}/${SERIAL}/PATHS.txt" "--exclude=*" "/mnt/user/" "/mnt/disks/${LABEL}")
	rsync ${Rsync_Config[@]}
}
# END FUNCTION RSYNC ------------------------------------------------

# FUNCTION MOUNT ----------------------------------------------------
Func-Mount() {
	# Check if drive unmounted
	if [ ! -d ${MOUNTPOINT} ]; then		
		Func-Error ${Msg_Mount} ${Msg_Alert2} ${Msg_Alert3}
		Func-Send-Email
		exit 1
	fi
}
# END FUNCTION MOUNT ------------------------------------------------

# FUNCTION UNMOUNT --------------------------------------------------
Func-Unmount() {
	# Check if drive mounted
	if [ -d ${MOUNTPOINT} ]; then
		Func-Send-Email
		/usr/local/emhttp/plugins/unassigned.devices/scripts/rc.unassigned umount "${DEVICE}"
	else
		Func-Error ${Msg_Unmount} ${Msg_Alert1} ${Msg_Alert3}
		Func-Send-Email
	fi
}
# END FUNCTION UNMOUNT ----------------------------------------------

# FUNCTION SEND EMAIL ----------------------------------------------
Func-Send-Email() {
	sendmail ${Send_Email} < ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
}
# END FUNCTION SEND EMAIL ------------------------------------------

# FUNCTION ERROR ----------------------------------------------------
Func-Error() {	
	echo "" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "${1}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "${2}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "${3}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
}
# END FUNCTION ERROR ------------------------------------------------

# FUNCTION LOG ------------------------------------------------------
Func-Log() {
	echo "From: ${Send_Email}" > ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "To: ${Send_Email}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "Subject: ${Msg_Mail_Subject}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	
	# Today date YYYY-MM-DD
	Today_Date=$(date +%Y-%m-%d)
	echo "${Msg_Device} = ${LABEL}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
	echo "${Msg_Date} = ${Today_Date}" >> ${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt
}
# END FUNCTION LOG --------------------------------------------------

# FUNCTION CREATE SCRIPT --------------------------------------------
Func-Create-Script() {
	Src_Flash="/boot/config/plugins/user.scripts/scripts"
	
	if [ ! -d "${Script_Dir}/${Script_Name}" ]; then
		mkdir "${Script_Dir}/${Script_Name}"
	fi
	
	if [ ! -d "${Script_Dir}/${Script_Name}/${SERIAL}" ]; then
		mkdir "${Script_Dir}/${Script_Name}/${SERIAL}"
	fi
	
	
	if [ ! -d "${Src_Flash}/${Script_Name}" ]; then
		mkdir "${Src_Flash}/${Script_Name}"
		touch "${Src_Flash}/${Script_Name}/description"
		touch "${Src_Flash}/${Script_Name}/name"
		touch "${Src_Flash}/${Script_Name}/script"
		echo "${Script_Name}" > "${Src_Flash}/${Script_Name}/name"
		Func-Bkp-Ud
	fi
	
	
	if [ ! -d "${Src_Flash}/${Script_Name}/${SERIAL}" ]; then
		mkdir "${Src_Flash}/${Script_Name}/${SERIAL}"
	fi
	
	if [ ! -f "${Src_Flash}/${Script_Name}/${SERIAL}/PATHS.txt" ]; then
		touch "${Src_Flash}/${Script_Name}/${SERIAL}/PATHS.txt"
	fi
}
# END FUNCTION CREATE SCRIPT ----------------------------------------

# FUNCTION SYNC SCRIPT ----------------------------------------------
Func-Sync-Script() {
	if [ -d "${Src_Flash}/${Script_Name}/${SERIAL}" ]; then
		# Copy "LOG-BKP.txt" and "LOG-LAST-SYNC-BKP.txt" file from "CA User Scripts" to "Script_Dir"
		cp -R "${Src_Flash}/${Script_Name}/${SERIAL}/LOG-BKP.txt" "${Script_Dir}/${Script_Name}/${SERIAL}/"
		cp -R "${Src_Flash}/${Script_Name}/${SERIAL}/LOG-LAST-SYNC-BKP.txt" "${Script_Dir}/${Script_Name}/${SERIAL}/"
		
		# Copy "PATHS.txt" file from "Script_Dir" to "CA User Scripts"
		if [ -f "${Script_Dir}/${Script_Name}/${SERIAL}/PATHS.txt" ]; then
			cp -R "${Script_Dir}/${Script_Name}/${SERIAL}/PATHS.txt" "${Src_Flash}/${Script_Name}/${SERIAL}/"
		else
			cp -R "${Src_Flash}/${Script_Name}/${SERIAL}/PATHS.txt" "${Script_Dir}/${Script_Name}/${SERIAL}/"			
		fi
		
		if [ -f "/boot/config/plugins/unassigned.devices/${LABEL}.sh" ]; then
			cp -R "/boot/config/plugins/unassigned.devices/${LABEL}.sh" "${Script_Dir}/${Script_Name}/${SERIAL}/SCRIPT.txt"
		fi
		
		# Change folder permission
		chown -R root:users "${Script_Dir}/${Script_Name}/${SERIAL}/"
		chmod -R 660 "${Script_Dir}/${Script_Name}/${SERIAL}/"
	fi
}
# END FUNCTION SYNC SCRIPT ------------------------------------------

# FUNCTION CREATE BKP_UD --------------------------------------------
Func-Bkp-Ud() {
cat << EOF > "${Src_Flash}/${Script_Name}/script"
#!/bin/bash
#PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
arrayStarted=true

# INCREMENTAL OR SYNC BACKUP TO UNRAID UNASSIGNED DEVICES -----------
# LINK: https://github.com/bdrtec/Unraid-Backup-Unassigned-Devices
# AUTHOR: BRAULIO DIAS RIBEIRO
# -------------------------------------------------------------------

# Turn on or off mount
St_Mount=0


# Fixed device to mount and backup ----------------------------
Fixed_Device=(
	# Fixed device name in "Unassigned devices" to mount and backup. Example: Dev 1, Dev 2, Dev 3
	#"dev1"
	#"dev3"
)
# End Device fixed to mount and backup ------------------------


# Check if mount is turn on or off ----------------------------
if [ -n "${St_Mount}" ] && [ "${St_Mount}" -eq "1" ]; then
	i=0
	while [ $i -lt ${#Fixed_Device[@]} ]
	do
		/usr/local/emhttp/plugins/unassigned.devices/scripts/rc.unassigned mount "${Fixed_Device[$i]}"
		let i++
	done
	echo "Mount successful!"
elif [ -z "${St_Mount}" ] || ([ "${St_Mount}" -ne "0" ] && [ "${St_Mount}" -ne "1" ]); then
	echo "Script not configured correctly! (set 0 or 1 in St_Mount)"
fi
# End Check if mount is turn on or off ------------------------
EOF
}
# END FUNCTION CREATE BKP_UD ----------------------------------------

# MAIN --------------------------------------------------------------
# Check if all variables are filled correctly
if ([ -d "/boot/config/plugins/user.scripts/scripts" ] && [ -d "${Script_Dir}" ] && [ -n "${Day_Sync}" ] && [ -n "${Send_Email}" ] && [ -n "${St_On_Off}" ]) && ([ "${St_On_Off}" -eq "0" ] || [ "${St_On_Off}" -eq "1" ]); then
	case "${ACTION}" in
	'ADD')
		Func-Create-Script
		Func-Incr-Sync
		Func-Log
		
		Func-Mount
		Func-Incr-Sync
		Func-Rsync
		Func-Sync-Script
		Func-Unmount
	;;
	esac
else
	/usr/local/emhttp/webGui/scripts/notify -s "${Msg_Mail_Subject}" -m "${Msg_Error}\n${Msg_Alert3}" -t
fi
# END MAIN ----------------------------------------------------------
